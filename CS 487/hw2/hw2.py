# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zL0zCxLRWEjzvrmyIGfmMJihn-65Mia1
"""

import numpy as np
import matplotlib.pyplot as plt
np.set_printoptions( suppress=True )

def get_2d_samples( n, x_low, x_high, y_low, y_high ):
  return np.append(
    np.expand_dims( ( x_high - x_low ) * np.random.rand( n ) + x_low, axis=1 ),
    np.expand_dims( ( y_high - y_low ) * np.random.rand( n ) + y_low, axis=1 ),
    axis=1
  )

def unison_shuffle( arr1, arr2 ):
    assert len( arr1 ) == len( arr2 )
    p = np.random.permutation( len( arr1 ) )
    return arr1[ p ], arr2[ p ]

n = 250

low = -1
high = 20

x_label = [ 1, 0 ]
x_class = np.append(
  get_2d_samples( n, -high, -low, low, high ),
  get_2d_samples( n, low, high, -high, -low ),
  axis=0
)
x_labels = np.full( ( 2 * n, 2 ), x_label )

o_label = [ 0, 1 ]
o_class = np.append(
  get_2d_samples( n, low, high, low, high ),
  get_2d_samples( n, -high, -low, -high, -low ),
  axis=0
)
o_labels = np.full( ( 2 * n, 2 ), o_label )

plt.scatter( x_class[ :, 0 ], x_class[ :, 1 ], marker='+', c='blue', label='X-class' )
plt.scatter( o_class[ :, 0 ], o_class[ :, 1 ], marker='o', c='red', edgecolors='none', label='O-class' )
plt.legend()
plt.grid( True )
plt.savefig('index.png')

train_data = np.append( x_class, o_class, axis=0 )
train_labels = np.append( x_labels, o_labels, axis=0 )
train_data, train_labels = unison_shuffle( train_data, train_labels )

train_data

train_labels

import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense

model = Sequential( name="sequential" )
model.add( Dense( 8, activation="relu",    name="hidden", input_shape=(2,) ) )
model.add( Dense( 2, activation="sigmoid", name="output" ) )

m = model( tf.ones( ( 0, 2 ) ) )

model.summary()
print( model.get_weights() )

model.compile(
    optimizer="adam",
    loss="binary_crossentropy",
    metrics=[ "accuracy" ]
)
bs = 100
model.fit( train_data, train_labels, batch_size=bs, epochs=20, verbose=1 )

k = 75

x_test_class = np.append(
  get_2d_samples( k, -high, -low, low, high ),
  get_2d_samples( k, low, high, -high, -low ),
  axis=0
)
x_test_labels = np.full( ( 2 * k, 2 ), x_label )

o_test_class = np.append(
  get_2d_samples( k, low, high, low, high ),
  get_2d_samples( k, -high, -low, -high, -low ),
  axis=0
)
o_test_labels = np.full( ( 2 * k, 2 ), o_label )

test_data = np.append( x_test_class, o_test_class, axis=0 )
test_labels = np.append( x_test_labels, o_test_labels, axis=0 )
test_data, test_labels = unison_shuffle( test_data, test_labels )
test_label_vals = np.array( [ 1 if label[ 0 ] else -1 for label in test_labels ] )

score = model.evaluate( test_data, test_labels, batch_size=bs, verbose=1 )

print( score )
